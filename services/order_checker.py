import asyncio
from database.db import db
from database.models import ORDERS_COLLECTION, PRODUCTS_COLLECTION
from utils.notifications import notify_admin

# TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –∏–ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å API Kaspi
async def fetch_kaspi_orders():
    # –ü—Ä–∏–º–µ—Ä: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
    # [{order_id, status, date, product_name}]
    return []

async def check_orders(bot):
    new_orders = await fetch_kaspi_orders()
    for order in new_orders:
        exists = await db[ORDERS_COLLECTION].find_one({'order_id': order['order_id']})
        if not exists:
            await db[ORDERS_COLLECTION].insert_one(order)
            # –û–±–Ω–æ–≤–ª—è–µ–º last_order_date —É —Ç–æ–≤–∞—Ä–∞
            await db[PRODUCTS_COLLECTION].update_one(
                {'name': order['product_name']},
                {'$set': {'last_order_date': order['date']}}
            )
            if order['status'] in ['–ù–∞ –¥–æ—Å—Ç–∞–≤–∫–µ', '–ù–∞ —É–ø–∞–∫–æ–≤–∫–µ']:
                await notify_admin(
                    bot,
                    f"üöö –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ —Å—Ç–∞—Ç—É—Å–µ '{order['status']}': <b>{order['product_name']}</b>, ‚Ññ{order['order_id']}"
                )

async def order_check_scheduler(bot):
    while True:
        await check_orders(bot)
        await asyncio.sleep(1800)  # 30 –º–∏–Ω—É—Ç 