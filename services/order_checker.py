import asyncio
from loguru import logger
from datetime import datetime, timedelta

from utils.notifications import notify_admin
from services.kaspi_api import get_orders
from config.config import ORDER_CHECK_INTERVAL, ORDER_LOOKBACK_DAYS


async def safe_notify(bot, message: str):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    if bot:
        await notify_admin(bot, message)


def format_order_date(order_date) -> str:
    if not order_date:
        return "-"
    try:
        if isinstance(order_date, (int, float)):
            dt = datetime.fromtimestamp(order_date / 1000)
        elif isinstance(order_date, datetime):
            dt = order_date
        else:
            dt = datetime.fromisoformat(order_date)
        return dt.strftime('%d.%m.%Y %H:%M')
    except Exception:
        return str(order_date)


def format_address(address: dict) -> str:
    if not address:
        return ""
    parts = []
    if address.get('city'):
        parts.append(address['city'])
    if address.get('street'):
        parts.append(address['street'])
    if address.get('house'):
        parts.append(f"–¥. {address['house']}")
    if address.get('apartment'):
        parts.append(f"–∫–≤. {address['apartment']}")
    return ", ".join(parts)


def format_products(products: list, fallback: str = '–¢–æ–≤–∞—Ä') -> str:
    if not products:
        return fallback
    lines = []
    for i, product in enumerate(products, 1):
        name = product.get('name', '‚Äî')
        qty = product.get('quantity', 1)
        price = product.get('price', 0)
        lines.append(f"{i}. {name} x{qty} = {price:,} ‚Ç∏")
    return "\n".join(lines)


def get_delivery_text(state, status) -> tuple[str, str]:
    if state == 'NEW':
        return 'üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑', 'üÜï'
    elif status == 'APPROVED_BY_BANK':
        return '‚úÖ –û–¥–æ–±—Ä–µ–Ω –±–∞–Ω–∫–æ–º (—Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∏–Ω—è—Ç–∏—è)', '‚úÖ'
    elif state == 'DELIVERY':
        return 'üöö –í–∞—à–∞ –¥–æ—Å—Ç–∞–≤–∫–∞', 'üöö'
    elif state == 'KASPI_DELIVERY':
        return 'üì¶ Kaspi –î–æ—Å—Ç–∞–≤–∫–∞', 'üì¶'
    else:
        return 'üìã –ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ', 'üìã'


async def show_order_notification(bot, order):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–¥–Ω–æ–º –∑–∞–∫–∞–∑–µ"""
    order_date_str = format_order_date(order.get('date'))

    customer = order.get('customer', {})
    customer_name = f"{customer.get('firstName', '')} {customer.get('lastName', '')}".strip() or '–ö–ª–∏–µ–Ω—Ç'
    customer_phone = customer.get('phone', '')
    customer_email = customer.get('email', '')

    products_text = format_products(order.get('products', []), order.get('product_name', '–¢–æ–≤–∞—Ä'))
    total_price = order.get('totalPrice', order.get('price', 0))
    status = order.get('status', '')
    state = order.get('state', '')
    delivery_type = order.get('deliveryType', '')
    delivery_mode = order.get('deliveryMode', '')
    address_text = format_address(order.get('deliveryAddress', {}))
    payment_method = order.get('paymentMethod', '')
    payment_status = order.get('paymentStatus', '')
    payment_text = f"{payment_method} ({payment_status})" if payment_status else payment_method
    comment_text = f"\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order.get('comment')}" if order.get('comment') else ""
    signature_text = "\n‚úçÔ∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å—å" if order.get('signatureRequired') else ""

    delivery_text, emoji = get_delivery_text(state, status)

    message = (
        f"{emoji} <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>\n"
        f"‚Ññ{order.get('code', order.get('order_id'))}\n\n"
        f"üì¶ <b>–¢–æ–≤–∞—Ä—ã:</b>\n{products_text}\n"
        f"üí∞ <b>–°—É–º–º–∞:</b> {total_price:,} ‚Ç∏\n\n"
        f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {customer_name}\n"
    )

    if customer_phone:
        message += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {customer_phone}\n"
    if customer_email:
        message += f"üìß Email: {customer_email}\n"

    message += (
        f"\nüìã <b>–°—Ç–∞—Ç—É—Å:</b> {status}\n"
        f"üöö <b>–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {delivery_text}\n"
    )

    if delivery_type:
        message += f"üìç <b>–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {delivery_type}\n"
    if address_text:
        message += f"üè† <b>–ê–¥—Ä–µ—Å:</b> {address_text}\n"

    message += (
        f"üí≥ <b>–û–ø–ª–∞—Ç–∞:</b> {payment_text}\n"
        f"üìÖ <b>–î–∞—Ç–∞:</b> {order_date_str}"
        f"{comment_text}"
        f"{signature_text}"
    )

    await safe_notify(bot, message)


async def show_new_orders(bot):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∑–∞–∫–∞–∑—ã —Å–æ state='NEW' –ø—Ä—è–º–æ –∏–∑ API –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    logger.info('–ó–∞–ø—Ä–æ—Å –∑–∞–∫–∞–∑–æ–≤ (state=NEW)')
    try:
        date_from = (datetime.now() - timedelta(days=ORDER_LOOKBACK_DAYS)).strftime('%Y-%m-%d')
        new_orders = await get_orders(state='NEW', date_from=date_from)

        if not new_orders:
            logger.info('–ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
            await safe_notify(bot, "üì≠ <b>–ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>")
            return

        logger.info(f'–ù–∞–π–¥–µ–Ω–æ {len(new_orders)} –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤')
        for order in new_orders:
            await show_order_notification(bot, order)

    except Exception as e:
        logger.exception('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤')
        await safe_notify(bot, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {e}")


async def order_check_scheduler(bot):
    logger.info('‚è≥ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫–∞–∑–æ–≤ (–∫–∞–∂–¥—ã–µ %s —Å–µ–∫)', ORDER_CHECK_INTERVAL)
    while True:
        try:
            await show_new_orders(bot)
        except Exception as e:
            logger.exception(f'–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –∑–∞–∫–∞–∑–æ–≤: {e}')
        await asyncio.sleep(ORDER_CHECK_INTERVAL)
