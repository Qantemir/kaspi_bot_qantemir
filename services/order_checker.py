import asyncio
from loguru import logger
from datetime import datetime, timedelta
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from utils.notifications import notify_admin
from services.kaspi_api import get_orders
from config.config import ORDER_CHECK_INTERVAL, ORDER_LOOKBACK_DAYS


async def safe_notify(bot, message: str, reply_markup=None):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —á–µ—Ä–µ–∑ Telegram
    """
    if bot:
        await notify_admin(bot, message, reply_markup=reply_markup)


def format_order_date(order_date) -> str:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞—Ç—É –∏–∑ timestamp –∏–ª–∏ —Å—Ç—Ä–æ–∫–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º
    """
    if not order_date:
        return "-"
    try:
        if isinstance(order_date, (int, float)):
            dt = datetime.fromtimestamp(order_date / 1000)
        elif isinstance(order_date, datetime):
            dt = order_date
        else:
            dt = datetime.fromisoformat(order_date)
        return dt.strftime('%d.%m.%Y %H:%M')
    except Exception:
        return str(order_date)


def format_address(address: dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∞–¥—Ä–µ—Å Kaspi –≤ —Å—Ç—Ä–æ–∫—É
    """
    if not address:
        return "-"
    parts = []
    if address.get('town'):
        parts.append(address['town'])
    if address.get('streetName'):
        parts.append(address['streetName'])
    if address.get('streetNumber'):
        parts.append(f"{address['streetNumber']}")
    if address.get('apartment'):
        parts.append(f"–∫–≤. {address['apartment']}")
    return ", ".join(parts)

def format_products(products: list, fallback: str = '–¢–æ–≤–∞—Ä') -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –≤–∏–¥–µ: 1. –ù–∞–∑–≤–∞–Ω–∏–µ x–ö–æ–ª-–≤–æ = –¶–µ–Ω–∞
    """
    if not products:
        return fallback
    lines = []
    for i, product in enumerate(products, 1):
        name = product.get('name', '‚Äî')
        qty = product.get('quantity', 1)
        price = product.get('price', 0)
        lines.append(f"{i}. {name} x{qty} = {price:,} ‚Ç∏")
    return "\n".join(lines)


def get_delivery_text(state, status) -> tuple[str, str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —ç–º–æ–¥–∑–∏ —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
    """
    if state == 'NEW':
        return 'üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑', 'üÜï'
    elif status == 'APPROVED_BY_BANK':
        return '‚úÖ –û–¥–æ–±—Ä–µ–Ω –±–∞–Ω–∫–æ–º (—Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∏–Ω—è—Ç–∏—è)', '‚úÖ'
    elif state == 'DELIVERY':
        return 'üöö –í–∞—à–∞ –¥–æ—Å—Ç–∞–≤–∫–∞', 'üöö'
    elif state == 'KASPI_DELIVERY':
        return 'üì¶ Kaspi –î–æ—Å—Ç–∞–≤–∫–∞', 'üì¶'
    return 'üìã –ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ', 'üìã'


async def check_orders_by_states(bot, states, date_from=None):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–∫–∞–∑—ã –ø–æ —Å–ø–∏—Å–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    """
    if date_from is None:
        date_from = (datetime.now() + timedelta(days=1) - timedelta(days=ORDER_LOOKBACK_DAYS)).strftime('%Y-%m-%d')
    found_any = False
    for state in states:
        try:
            orders = await get_orders(state=state, date_from=date_from)
            if not orders:
                continue
            for order in orders:
                if state == 'KASPI_DELIVERY' and order.get('courierTransmissionDate') is not None:
                    continue
                await show_order_notification(bot, order)
                found_any = True
        except Exception as e:
            await safe_notify(bot, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {state}: {e}")
    if not found_any:
        await safe_notify(bot, "üì≠ <b>–ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>")


async def show_new_orders(bot, date_from=None):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã —Å state='KASPI_DELIVERY' –∏ 'DELIVERY'
    """
    logger.info('–ó–∞–ø—Ä–æ—Å –∑–∞–∫–∞–∑–æ–≤ (state=KASPI_DELIVERY, DELIVERY)')
    await check_orders_by_states(bot, ['KASPI_DELIVERY', 'DELIVERY'], date_from=date_from)


async def show_order_notification(bot, order):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–¥–Ω–æ–º –∑–∞–∫–∞–∑–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    """
    order_date_str = format_order_date(order.get('date'))
    customer = order.get('customer', {})
    customer_name = f"{customer.get('firstName', '')} {customer.get('lastName', '')}".strip() or '–ö–ª–∏–µ–Ω—Ç'
    customer_phone = customer.get('cellPhone', '')
    customer_email = customer.get('email', '')
    products_text = format_products(order.get('products', []), order.get('product_name', '–¢–æ–≤–∞—Ä'))
    total_price = order.get('totalPrice', order.get('price', 0))
    status = order.get('status', '')
    state = order.get('state', '')
    delivery_type = order.get('deliveryType', '')
    delivery_mode = order.get('deliveryMode', '')
    address_text = format_address(order.get('deliveryAddress', {}))
    payment_method = order.get('paymentMethod', '')
    payment_status = order.get('paymentStatus', '')
    payment_text = f"{payment_method} ({payment_status})" if payment_status else payment_method
    comment_text = f"\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order.get('comment')}" if order.get('comment') else ""
    signature_text = "\n‚úçÔ∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å—å" if order.get('signatureRequired') else ""
    delivery_text, emoji = get_delivery_text(state, status)
    message = (
        f"{emoji} <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>\n"
        f"‚Ññ{order.get('code', order.get('order_id'))}\n\n"
        f"üì¶ <b>–¢–æ–≤–∞—Ä—ã:</b>\n{products_text}\n"
        f"üí∞ <b>–°—É–º–º–∞:</b> {total_price:,} ‚Ç∏\n\n"
        f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {customer_name}\n"
    )
    if customer_phone:
        message += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {customer_phone}\n"
    message += (
        f"\nüöö <b>–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {delivery_text}\n"
    )
    if delivery_type:
        message += f"üìç <b>–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {delivery_type}\n"
    if address_text and state != 'KASPI_DELIVERY':
        message += f"üè† <b>–ê–¥—Ä–µ—Å:</b> {address_text}\n"
    message += (
        f"üìÖ <b>–î–∞—Ç–∞:</b> {order_date_str}"
        f"{comment_text}"
        f"{signature_text}"
    )
    assembled = order.get('assembled')
    courier_transmission = order.get('courierTransmissionDate')
    if state == 'DELIVERY':
        kb = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text='–í—ã–¥–∞—Ç—å –∑–∞–∫–∞–∑', callback_data=f'give_order:{order.get("order_id") or order.get("code")}')
        ]])
        await safe_notify(bot, message, reply_markup=kb)
    elif state == 'KASPI_DELIVERY':
        if assembled is False and courier_transmission is None:
            kb = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text='–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∫–ª–∞–¥–Ω—É—é', callback_data=f'create_invoice:{order.get("order_id") or order.get("code")}')
            ]])
            await safe_notify(bot, message, reply_markup=kb)
        elif assembled is True and courier_transmission is None:
            waybill_url = order.get('waybill')
            if waybill_url:
                message += f"\n\n<a href=\"{waybill_url}\">üìÑ –°–∫–∞—á–∞—Ç—å –Ω–∞–∫–ª–∞–¥–Ω—É—é (PDF)</a>"
                await safe_notify(bot, message)
            else:
                kb = InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text='–°–∫–∞—á–∞—Ç—å –Ω–∞–∫–ª–∞–¥–Ω—É—é', callback_data=f'download_invoice:{order.get("order_id") or order.get("code")}')
                ]])
                await safe_notify(bot, message, reply_markup=kb)
        else:
            await safe_notify(bot, message)
    else:
        await safe_notify(bot, message)


async def order_check_scheduler(bot):
    """
    –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    """
    logger.info('‚è≥ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫–∞–∑–æ–≤ (–∫–∞–∂–¥—ã–µ %s —Å–µ–∫)', ORDER_CHECK_INTERVAL)
    while True:
        try:
            await show_new_orders(bot)
        except Exception as e:
            logger.exception(f'–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –∑–∞–∫–∞–∑–æ–≤: {e}')
        await asyncio.sleep(ORDER_CHECK_INTERVAL)
