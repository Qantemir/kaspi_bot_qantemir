import asyncio
from database.db import db
from database.models import ORDERS_COLLECTION, PRODUCTS_COLLECTION
from utils.notifications import notify_admin
from loguru import logger
from services.kaspi_api import get_orders

# TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –∏–ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å API Kaspi
async def fetch_kaspi_orders():
    logger.info('–ó–∞–ø—Ä–æ—Å –∑–∞–∫–∞–∑–æ–≤ —Å Kaspi —á–µ—Ä–µ–∑ API')
    try:
        orders = await get_orders()
        return orders
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ —á–µ—Ä–µ–∑ API: —Ç–∏–ø: {type(e).__name__}, –æ—à–∏–±–∫–∞: {e}')
        await notify_admin(
            bot=None,  # bot –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω –≤ –≤—ã–∑—ã–≤–∞—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
            text=f'‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ —á–µ—Ä–µ–∑ API:</b>\n<code>{e}</code>'
        )
        return []

async def check_orders(bot):
    logger.info('–°—Ç–∞—Ä—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫–∞–∑–æ–≤')
    new_orders = await fetch_kaspi_orders()
    for order in new_orders:
        exists = await db[ORDERS_COLLECTION].find_one({'order_id': order['order_id']})
        if not exists:
            logger.info(f'–ù–æ–≤—ã–π –∑–∞–∫–∞–∑: {order}')
            await db[ORDERS_COLLECTION].insert_one(order)
            await db[PRODUCTS_COLLECTION].update_one(
                {'name': order['product_name']},
                {'$set': {'last_order_date': order['date']}}
            )
            logger.info(f'–û–±–Ω–æ–≤–ª–µ–Ω last_order_date –¥–ª—è {order["product_name"]}')
            if order['status'] in ['–ù–∞ –¥–æ—Å—Ç–∞–≤–∫–µ', '–ù–∞ —É–ø–∞–∫–æ–≤–∫–µ']:
                logger.info(f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ: {order}')
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∑–∞–∫–∞–∑–∞
                order_date = order.get('date', '')
                if order_date:
                    from datetime import datetime
                    try:
                        dt = order_date if isinstance(order_date, datetime) else datetime.fromisoformat(order_date)
                        order_date_str = dt.strftime('%d.%m.%Y %H:%M')
                    except Exception:
                        order_date_str = str(order_date)
                else:
                    order_date_str = '-'
                await notify_admin(
                    bot,
                    f"üöö <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>\n–¢–æ–≤–∞—Ä: <b>{order['product_name']}</b>\n–°—Ç–∞—Ç—É—Å: <b>{order['status']}</b>\n‚Ññ{order['order_id']}\n–î–∞—Ç–∞: {order_date_str}"
                )

async def order_check_scheduler(bot):
    logger.info('–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫–∞–∑–æ–≤')
    while True:
        await check_orders(bot)
        await asyncio.sleep(1800)  # 30 –º–∏–Ω—É—Ç 