import asyncio
from database.db import db
from database.models import PRODUCTS_COLLECTION
from services.kaspi_parser import get_kaspi_prices
from services.kaspi_api import get_products
from utils.notifications import notify_admin
from config.config import ADMIN_ID
from datetime import datetime, timedelta
from loguru import logger
import traceback

async def check_all_prices(bot):
    logger.info('–°—Ç–∞—Ä—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Ü–µ–Ω —á–µ—Ä–µ–∑ Kaspi API')
    try:
        api_products = await get_products()
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ API: —Ç–∏–ø: {type(e).__name__}, –æ—à–∏–±–∫–∞: {e}\n{traceback.format_exc()}')
        await notify_admin(bot, f'‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ API: {e}')
        return
    for api_product in api_products:
        name = api_product.get('name')
        product_id = api_product.get('id')
        price = api_product.get('price')
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –ë–î (MongoDB)
        db_product = await db[PRODUCTS_COLLECTION].find_one({'product_id': product_id})
        if db_product:
            last_price = db_product.get('last_price')
            min_price = db_product.get('min_price')
            await db[PRODUCTS_COLLECTION].update_one({'_id': db_product['_id']}, {'$set': {'last_price': price}})
            logger.info(f'–û–±–Ω–æ–≤–ª–µ–Ω–∞ —Ü–µ–Ω–∞ –≤ –ë–î –¥–ª—è {name}: {price}')
            if last_price and price != last_price:
                logger.info(f'–¶–µ–Ω–∞ –Ω–∞ {name} –æ–±–Ω–æ–≤–ª–µ–Ω–∞: –±—ã–ª–æ {last_price} ‚Üí —Å—Ç–∞–ª–æ {price}')
                await notify_admin(bot, f'‚ÑπÔ∏è –¶–µ–Ω–∞ –Ω–∞ <b>{name}</b> –æ–±–Ω–æ–≤–ª–µ–Ω–∞: –±—ã–ª–æ {last_price:,} ‚Üí —Å—Ç–∞–ª–æ {price:,} ‚Ç∏'.replace(',', ' '))
        else:
            # –ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ë–î
            await db[PRODUCTS_COLLECTION].insert_one({
                'name': name,
                'product_id': product_id,
                'last_price': price,
                'min_price': None,
                'last_order_date': None
            })
            logger.info(f'–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä –≤ –ë–î: {name}')
    # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏ ‚Äî –æ—Å—Ç–∞–≤–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ —Å–∞–π—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ

async def check_sleeping_products(bot):
    logger.info('–ü—Ä–æ–≤–µ—Ä–∫–∞ "—Å–ø—è—â–∏—Ö" —Ç–æ–≤–∞—Ä–æ–≤ (–Ω–µ –ø—Ä–æ–¥–∞–≤–∞–ª–∏—Å—å 10 –¥–Ω–µ–π)')
    ten_days_ago = datetime.utcnow() - timedelta(days=10)
    products = await db[PRODUCTS_COLLECTION].find().to_list(100)
    for product in products:
        last_order_date = product.get('last_order_date')
        if not last_order_date:
            continue
        try:
            last_dt = last_order_date if isinstance(last_order_date, datetime) else datetime.fromisoformat(last_order_date)
        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –¥–ª—è {product["name"]}: {e}')
            continue
        if last_dt < ten_days_ago:
            logger.info(f'–¢–æ–≤–∞—Ä {product["name"]} –¥–∞–≤–Ω–æ –Ω–µ –ø—Ä–æ–¥–∞–≤–∞–ª—Å—è (–ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑: {last_dt})')
            await notify_admin(bot, f'üìâ –¢–æ–≤–∞—Ä <b>{product["name"]}</b> –¥–∞–≤–Ω–æ –Ω–µ –ø—Ä–æ–¥–∞—ë—Ç—Å—è')

async def price_check_scheduler(bot):
    logger.info('–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω')
    while True:
        await check_all_prices(bot)
        await check_sleeping_products(bot)
        await asyncio.sleep(1800)  # 30 –º–∏–Ω—É—Ç 