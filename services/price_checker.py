import asyncio
from database.db import db
from database.models import PRODUCTS_COLLECTION
from services.kaspi_parser import get_kaspi_prices
from utils.notifications import notify_admin
from config.config import ADMIN_ID
from datetime import datetime, timedelta

async def check_all_prices(bot):
    products = await db[PRODUCTS_COLLECTION].find().to_list(100)
    for product in products:
        url = product['link']
        name = product['name']
        min_price = product['min_price']
        last_price = product.get('last_price')
        try:
            price, competitors = await get_kaspi_prices(url)
        except Exception as e:
            await notify_admin(bot, f'‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è {name}: {e}')
            continue
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –≤ –ë–î
        await db[PRODUCTS_COLLECTION].update_one({'_id': product['_id']}, {'$set': {'last_price': price}})
        # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
        if last_price and price != last_price:
            await notify_admin(bot, f'‚ÑπÔ∏è –¶–µ–Ω–∞ –Ω–∞ <b>{name}</b> –æ–±–Ω–æ–≤–ª–µ–Ω–∞: –±—ã–ª–æ {last_price:,} ‚Üí —Å—Ç–∞–ª–æ {price:,} ‚Ç∏'.replace(',', ' '))
        # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –≤—ã—à–µ, —á–µ–º —É –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
        if competitors:
            min_competitor = min([c['price'] for c in competitors if c['price'] is not None], default=None)
            if min_competitor and price > min_competitor:
                await notify_admin(bot, f'‚ö†Ô∏è –£ —Ç–µ–±—è –Ω–µ —Å–∞–º–∞—è –Ω–∏–∑–∫–∞—è —Ü–µ–Ω–∞ –Ω–∞ <b>{name}</b>!')

async def check_sleeping_products(bot):
    ten_days_ago = datetime.utcnow() - timedelta(days=10)
    products = await db[PRODUCTS_COLLECTION].find().to_list(100)
    for product in products:
        last_order_date = product.get('last_order_date')
        if not last_order_date:
            continue
        try:
            last_dt = last_order_date if isinstance(last_order_date, datetime) else datetime.fromisoformat(last_order_date)
        except Exception:
            continue
        if last_dt < ten_days_ago:
            await notify_admin(bot, f'üìâ –¢–æ–≤–∞—Ä <b>{product["name"]}</b> –¥–∞–≤–Ω–æ –Ω–µ –ø—Ä–æ–¥–∞—ë—Ç—Å—è')

async def price_check_scheduler(bot):
    while True:
        await check_all_prices(bot)
        await check_sleeping_products(bot)
        await asyncio.sleep(1800)  # 30 –º–∏–Ω—É—Ç 