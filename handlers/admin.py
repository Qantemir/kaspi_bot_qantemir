from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from handlers.fsm_add_product import AddProduct
from database.db import db
from database.models import PRODUCTS_COLLECTION
from config.config import ADMIN_ID
from services.order_checker import check_orders
from utils.keyboards import main_kb, cancel_kb, delete_confirm_kb

router = Router()

# –§–∏–ª—å—Ç—Ä —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞
@router.message(F.from_user.id != ADMIN_ID)
async def block_non_admin(message: types.Message):
    await message.answer('‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω')

@router.message(Command('add'))
async def cmd_add(message: types.Message, state: FSMContext):
    await state.set_state(AddProduct.name)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:', reply_markup=cancel_kb)

@router.message(Command('list'))
async def cmd_list(message: types.Message):
    products = await db[PRODUCTS_COLLECTION].find().to_list(100)
    if not products:
        await message.answer('–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç.', reply_markup=main_kb)
        return
    text = '\n'.join([f"{idx+1}. {p['name']} ‚Äî {p.get('last_price', '–Ω–µ—Ç —Ü–µ–Ω—ã')} ‚Ç∏" for idx, p in enumerate(products)])
    await message.answer(f'<b>–¢–æ–≤–∞—Ä—ã:</b>\n{text}', reply_markup=main_kb)

@router.message(Command('delete'))
async def cmd_delete(message: types.Message, state: FSMContext):
    products = await db[PRODUCTS_COLLECTION].find().to_list(100)
    if not products:
        await message.answer('–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç.', reply_markup=main_kb)
        return
    text = '\n'.join([f"{idx+1}. {p['name']}" for idx, p in enumerate(products)])
    await state.update_data(products=products)
    await state.set_state('await_delete_number')
    await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n{text}', reply_markup=cancel_kb)

@router.message(F.state == 'await_delete_number')
async def process_delete_number(message: types.Message, state: FSMContext):
    data = await state.get_data()
    products = data.get('products', [])
    try:
        idx = int(message.text.strip()) - 1
        assert 0 <= idx < len(products)
    except (ValueError, AssertionError):
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä!', reply_markup=cancel_kb)
        return
    product = products[idx]
    await db[PRODUCTS_COLLECTION].delete_one({'_id': product['_id']})
    await message.answer(f"üóëÔ∏è –¢–æ–≤–∞—Ä <b>{product['name']}</b> —É–¥–∞–ª—ë–Ω!", reply_markup=main_kb)
    await state.clear()

@router.message(Command('check_price'))
async def cmd_check_price(message: types.Message):
    await message.answer('üîÑ –ü—Ä–æ–≤–µ—Ä—è—é —Ü–µ–Ω—ã... (—Ä–µ–∞–ª–∏–∑—É–µ–º –ø–æ–∑–∂–µ)', reply_markup=main_kb)

@router.message(Command('check_orders'))
async def cmd_check_orders(message: types.Message, bot):
    await message.answer('üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –∑–∞–∫–∞–∑—ã...', reply_markup=main_kb)
    await check_orders(bot)
    await message.answer('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.', reply_markup=main_kb) 