from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from handlers.fsm_add_product import AddProduct
from database.db import db
from database.models import PRODUCTS_COLLECTION
from config.config import ADMIN_ID
from services.order_checker import check_orders, order_check_scheduler
from utils.keyboards import main_menu_kb, orders_menu_kb, prices_menu_kb, prices_interval_kb, invoices_menu_kb, settings_menu_kb, cancel_kb, confirm_kb
from loguru import logger
import asyncio
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ –∑–∞–∫–∞–∑–∞—Ö
order_notify_task = None
order_notify_enabled = False

# –§–∏–ª—å—Ç—Ä —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞
@router.message(F.from_user.id != ADMIN_ID)
async def block_non_admin(message: types.Message):
    logger.warning(f'–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ-–∞–¥–º–∏–Ω–∞: {message.from_user.id}')
    await message.answer('‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω', reply_markup=main_menu_kb())

@router.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä')
async def cmd_add(message: types.Message, state: FSMContext):
    logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
    await state.set_state(AddProduct.name)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:', reply_markup=cancel_kb)

@router.message(F.text == '–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤')
async def cmd_list(message: types.Message):
    logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤')
    products = await db[PRODUCTS_COLLECTION].find().to_list(100)
    if not products:
        logger.info('–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç')
        await message.answer('–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç.', reply_markup=main_menu_kb())
        return
    text = '\n'.join([f"{idx+1}. {p['name']} ‚Äî {p.get('last_price', '–Ω–µ—Ç —Ü–µ–Ω—ã')} ‚Ç∏" for idx, p in enumerate(products)])
    await message.answer(f'<b>–¢–æ–≤–∞—Ä—ã:</b>\n{text}', reply_markup=main_menu_kb())

@router.message(F.text == '–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä')
async def cmd_delete(message: types.Message, state: FSMContext):
    logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
    products = await db[PRODUCTS_COLLECTION].find().to_list(100)
    if not products:
        logger.info('–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç (—É–¥–∞–ª–µ–Ω–∏–µ)')
        await message.answer('–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç.', reply_markup=main_menu_kb())
        return
    text = '\n'.join([f"{idx+1}. {p['name']}" for idx, p in enumerate(products)])
    await state.update_data(products=products)
    await state.set_state('await_delete_number')
    await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n{text}', reply_markup=cancel_kb)

@router.message(F.text == '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–Ω—ã')
async def cmd_check_price(message: types.Message):
    logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫—É —Ü–µ–Ω')
    await message.answer('üîÑ –ü—Ä–æ–≤–µ—Ä—è—é —Ü–µ–Ω—ã... (—Ä–µ–∞–ª–∏–∑—É–µ–º –ø–æ–∑–∂–µ)', reply_markup=main_menu_kb())

@router.message(F.text == '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–∫–∞–∑—ã')
async def cmd_check_orders(message: types.Message, bot):
    logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–∫–∞–∑–æ–≤')
    await message.answer('üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –∑–∞–∫–∞–∑—ã...', reply_markup=main_menu_kb())
    await check_orders(bot)
    await message.answer('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.', reply_markup=main_menu_kb())

@router.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∞')
async def cancel_any(message: types.Message, state: FSMContext):
    logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ')
    await state.clear()
    await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=main_menu_kb())

@router.message(F.state == 'await_delete_number')
async def process_delete_number(message: types.Message, state: FSMContext):
    if message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
        await state.clear()
        await message.answer('–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=main_menu_kb())
        return
    data = await state.get_data()
    products = data.get('products', [])
    try:
        idx = int(message.text.strip()) - 1
        assert 0 <= idx < len(products)
    except (ValueError, AssertionError):
        logger.warning('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è')
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä!', reply_markup=cancel_kb)
        return
    product = products[idx]
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {product["name"]}')
    await state.update_data(delete_idx=idx)
    await state.set_state('await_delete_confirm')
    await message.answer(f'–£–¥–∞–ª–∏—Ç—å <b>{product["name"]}</b>?', reply_markup=confirm_kb)

@router.message(F.state == 'await_delete_confirm')
async def process_delete_confirm(message: types.Message, state: FSMContext):
    if message.text == '‚ùå –û—Ç–º–µ–Ω–∞' or message.text == '–ù–µ—Ç':
        logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞')
        await state.clear()
        await message.answer('–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=main_menu_kb())
        return
    if message.text == '–î–∞':
        data = await state.get_data()
        products = data.get('products', [])
        idx = data.get('delete_idx')
        if idx is not None and 0 <= idx < len(products):
            product = products[idx]
            logger.info(f'–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω: {product["name"]}')
            await db[PRODUCTS_COLLECTION].delete_one({'_id': product['_id']})
            await message.answer(f"üóëÔ∏è –¢–æ–≤–∞—Ä <b>{product['name']}</b> —É–¥–∞–ª—ë–Ω!", reply_markup=main_menu_kb())
        else:
            logger.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: –∏–Ω–¥–µ–∫—Å –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞')
            await message.answer('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è.', reply_markup=main_menu_kb())
        await state.clear()
    else:
        logger.warning('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–ª –î–∞/–ù–µ—Ç –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è')
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ "–î–∞" –∏–ª–∏ "–ù–µ—Ç".', reply_markup=confirm_kb)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.message(F.text == '‚¨ÖÔ∏è –í –º–µ–Ω—é')
async def back_to_main_menu(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer('üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=main_menu_kb())

@router.message(F.text == 'üì¶ –ó–∞–∫–∞–∑—ã')
async def orders_menu(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer('üì¶ –†–∞–∑–¥–µ–ª ¬´–ó–∞–∫–∞–∑—ã¬ª', reply_markup=await orders_menu_kb())

@router.message(F.text == 'üìâ –¶–µ–Ω—ã')
async def prices_menu(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer('üìâ –†–∞–∑–¥–µ–ª ¬´–¶–µ–Ω—ã¬ª', reply_markup=prices_menu_kb())

@router.message(F.text == 'üìÑ –ù–∞–∫–ª–∞–¥–Ω—ã–µ')
async def invoices_menu(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer('üìÑ –†–∞–∑–¥–µ–ª ¬´–ù–∞–∫–ª–∞–¥–Ω—ã–µ¬ª', reply_markup=invoices_menu_kb())

@router.message(F.text == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
async def settings_menu(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer('‚öôÔ∏è –†–∞–∑–¥–µ–ª ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª', reply_markup=settings_menu_kb())

# –ó–∞–∫–∞–∑—ã
@router.message(F.text == 'üì¨ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–∫–∞–∑—ã —Å–µ–π—á–∞—Å')
async def check_orders_now(message: types.Message, bot):
    await message.answer('üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –∑–∞–∫–∞–∑—ã...', reply_markup=await orders_menu_kb())
    await check_orders(bot)
    await message.answer('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.', reply_markup=await orders_menu_kb())

@router.message(F.text.in_(['üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–π —á–∞—Å', 'üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è']))
async def toggle_order_notifications(message: types.Message, bot):
    global order_notify_task, order_notify_enabled
    if not order_notify_enabled:
        # –í–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if order_notify_task is None or order_notify_task.done():
            order_notify_task = asyncio.create_task(order_check_scheduler(bot))
        order_notify_enabled = True
        await set_order_notify_enabled(True)
        await message.answer('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö –≤–∫–ª—é—á–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∑–∞–∫–∞–∑—ã –∫–∞–∂–¥—ã–π —á–∞—Å.', reply_markup=await orders_menu_kb())
    else:
        # –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if order_notify_task and not order_notify_task.done():
            order_notify_task.cancel()
        order_notify_enabled = False
        await set_order_notify_enabled(False)
        await message.answer('üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö –æ—Ç–∫–ª—é—á–µ–Ω—ã.', reply_markup=await orders_menu_kb())

# –¶–µ–Ω—ã
@router.message(F.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ')
async def add_product_track(message: types.Message, state: FSMContext):
    await state.set_state(AddProduct.name)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:', reply_markup=cancel_kb)

@router.message(F.text == 'üìã –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤')
async def list_tracked_products(message: types.Message):
    products = await db[PRODUCTS_COLLECTION].find().to_list(100)
    if not products:
        await message.answer('–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç.', reply_markup=prices_menu_kb())
        return
    text = '\n'.join([f"{idx+1}. {p['name']} ‚Äî {p.get('last_price', '–Ω–µ—Ç —Ü–µ–Ω—ã')} ‚Ç∏" for idx, p in enumerate(products)])
    await message.answer(f'<b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã:</b>\n{text}', reply_markup=prices_menu_kb())

@router.message(F.text == '‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω')
async def set_price_interval(message: types.Message):
    current = await get_price_check_interval()
    text = '‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω:'
    if current == 'hourly':
        text += '\n(–¢–µ–∫—É—â–∏–π: —Ä–∞–∑ –≤ —á–∞—Å)'
    elif current == '30min':
        text += '\n(–¢–µ–∫—É—â–∏–π: –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω)'
    elif current == 'daily':
        text += '\n(–¢–µ–∫—É—â–∏–π: —Ä–∞–∑ –≤ –¥–µ–Ω—å)'
    await message.answer(text, reply_markup=prices_interval_kb())

@router.message(F.text.in_(['–†–∞–∑ –≤ —á–∞—Å', '–ö–∞–∂–¥—ã–µ 30 –º–∏–Ω', '–†–∞–∑ –≤ –¥–µ–Ω—å']))
async def price_interval_selected(message: types.Message):
    mapping = {
        '–†–∞–∑ –≤ —á–∞—Å': 'hourly',
        '–ö–∞–∂–¥—ã–µ 30 –º–∏–Ω': '30min',
        '–†–∞–∑ –≤ –¥–µ–Ω—å': 'daily'
    }
    value = mapping.get(message.text, 'hourly')
    await set_price_check_interval(value)
    await message.answer(f'–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {message.text}', reply_markup=prices_menu_kb())

@router.message(F.text == 'üîî –û–ø–æ–≤–µ—â–∞—Ç—å –µ—Å–ª–∏ –Ω–µ –≤ —Ç–æ–ø-1')
async def toggle_top1_notify(message: types.Message):
    current = await get_notify_if_not_top1()
    new_value = not current
    await set_notify_if_not_top1(new_value)
    status = '–≤–∫–ª—é—á–µ–Ω—ã' if new_value else '–æ—Ç–∫–ª—é—á–µ–Ω—ã'
    await message.answer(f'üîî –û–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –ø–æ–∑–∏—Ü–∏–∏ –≤ —Ç–æ–ø–µ {status}.', reply_markup=prices_menu_kb())

@router.message(F.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
async def back_to_prices_menu(message: types.Message):
    await message.answer('üìâ –†–∞–∑–¥–µ–ª ¬´–¶–µ–Ω—ã¬ª', reply_markup=prices_menu_kb())

# –ù–∞–∫–ª–∞–¥–Ω—ã–µ
@router.message(F.text == 'üßæ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∫–ª–∞–¥–Ω—É—é')
async def create_invoice_handler(message: types.Message):
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π
    await message.answer('üßæ –ù–∞–∫–ª–∞–¥–Ω–∞—è —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞. [–°–∫–∞—á–∞—Ç—å PDF]', reply_markup=invoices_menu_kb())

@router.message(F.text == '‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –≤—Å–µ –Ω–∞–∫–ª–∞–¥–Ω—ã–µ')
async def download_all_invoices(message: types.Message):
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö
    await message.answer('‚¨áÔ∏è –í—Å–µ –Ω–∞–∫–ª–∞–¥–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞—Ä—Ö–∏–≤–æ–º (–ø—Ä–∏–º–µ—Ä)', reply_markup=invoices_menu_kb())

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
@router.message(F.text == '‚è± –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–∫–∞–∑–∞—Ö')
async def set_order_notify_interval(message: types.Message):
    current = await get_order_check_interval()
    text = '‚è± –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–∫–∞–∑–∞—Ö:'
    if current == 'hourly':
        text += '\n(–¢–µ–∫—É—â–∏–π: —Ä–∞–∑ –≤ —á–∞—Å)'
    elif current == '30min':
        text += '\n(–¢–µ–∫—É—â–∏–π: –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω)'
    elif current == 'daily':
        text += '\n(–¢–µ–∫—É—â–∏–π: —Ä–∞–∑ –≤ –¥–µ–Ω—å)'
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text='–†–∞–∑ –≤ —á–∞—Å')],
            [KeyboardButton(text='–ö–∞–∂–¥—ã–µ 30 –º–∏–Ω')],
            [KeyboardButton(text='–†–∞–∑ –≤ –¥–µ–Ω—å')],
            [KeyboardButton(text='‚¨ÖÔ∏è –í –º–µ–Ω—é')],
        ],
        resize_keyboard=True
    )
    await message.answer(text, reply_markup=kb)

@router.message(F.text.in_(['–†–∞–∑ –≤ —á–∞—Å', '–ö–∞–∂–¥—ã–µ 30 –º–∏–Ω', '–†–∞–∑ –≤ –¥–µ–Ω—å']) & (F.reply_to_message.text.contains('—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–∫–∞–∑–∞—Ö') | F.reply_to_message.text.contains('–∏–Ω—Ç–µ—Ä–≤–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π')))
async def order_interval_selected(message: types.Message):
    mapping = {
        '–†–∞–∑ –≤ —á–∞—Å': 'hourly',
        '–ö–∞–∂–¥—ã–µ 30 –º–∏–Ω': '30min',
        '–†–∞–∑ –≤ –¥–µ–Ω—å': 'daily'
    }
    value = mapping.get(message.text, '30min')
    await set_order_check_interval(value)
    await message.answer(f'–ò–Ω—Ç–µ—Ä–≤–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–∫–∞–∑–∞—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {message.text}', reply_markup=settings_menu_kb())

@router.message()
async def fallback_handler(message: types.Message):
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.', reply_markup=main_menu_kb())

# –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å orders_menu_kb —á—Ç–æ–±—ã –º–µ–Ω—è—Ç—å —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
async def orders_menu_kb():
    enabled = await get_order_notify_enabled()
    btn_text = 'üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' if enabled else 'üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–π —á–∞—Å'
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text='üì¨ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–∫–∞–∑—ã —Å–µ–π—á–∞—Å')],
            [KeyboardButton(text=btn_text)],
            [KeyboardButton(text='‚¨ÖÔ∏è –í –º–µ–Ω—é')],
        ],
        resize_keyboard=True
    )

ORDER_NOTIFY_KEY = 'order_notify_enabled'

async def get_order_notify_enabled():
    doc = await db['settings'].find_one({'_id': ORDER_NOTIFY_KEY})
    return bool(doc and doc.get('enabled'))

async def set_order_notify_enabled(value: bool):
    await db['settings'].update_one({'_id': ORDER_NOTIFY_KEY}, {'$set': {'enabled': value}}, upsert=True)

async def init_order_notify_state(bot):
    global order_notify_enabled, order_notify_task
    order_notify_enabled = await get_order_notify_enabled()
    if order_notify_enabled:
        if order_notify_task is None or order_notify_task.done():
            order_notify_task = asyncio.create_task(order_check_scheduler(bot)) 

PRICE_INTERVAL_KEY = 'price_check_interval'
ORDER_INTERVAL_KEY = 'order_check_interval'
NOTIFY_TOP1_KEY = 'notify_if_not_top1'

async def get_price_check_interval():
    doc = await db['settings'].find_one({'_id': PRICE_INTERVAL_KEY})
    return doc['value'] if doc and 'value' in doc else 'hourly'

async def set_price_check_interval(value: str):
    await db['settings'].update_one({'_id': PRICE_INTERVAL_KEY}, {'$set': {'value': value}}, upsert=True)

async def get_order_check_interval():
    doc = await db['settings'].find_one({'_id': ORDER_INTERVAL_KEY})
    return doc['value'] if doc and 'value' in doc else '30min'

async def set_order_check_interval(value: str):
    await db['settings'].update_one({'_id': ORDER_INTERVAL_KEY}, {'$set': {'value': value}}, upsert=True)

async def get_notify_if_not_top1():
    doc = await db['settings'].find_one({'_id': NOTIFY_TOP1_KEY})
    return bool(doc and doc.get('enabled'))

async def set_notify_if_not_top1(value: bool):
    await db['settings'].update_one({'_id': NOTIFY_TOP1_KEY}, {'$set': {'enabled': value}}, upsert=True)

# --- –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ---
async def init_all_settings(bot):
    await init_order_notify_state(bot)
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á —Å –Ω—É–∂–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è 